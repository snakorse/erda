http-server:
  addr: ":7091"

health:
  path: "/api/health"

# storages
kafka:
  servers: "${BOOTSTRAP_SERVERS:localhost:9092}"
  producer:
    options:
      go.produce.channel.size: ${KAFKA_PRODUCE_SIZE:200000}
etcd:
  endpoints: "${ETCD_ENDPOINTS:http://localhost:2379}"
  tls:
    cert_file: "${ETCD_CERT_FILE:/certs/etcd-client.pem}"
    cert_key_file: "${ETCD_CERT_KEY_FILE:/certs/etcd-client-key.pem}"
    ca_file: "${ETCD_CA_FILE:/certs/etcd-ca.pem}"

etcd-election@index:
  root_path: "/erda/monitor-index-rollover-election"

etcd-mutex:
  root_path: "/erda/streaming"

kafka.topic.initializer:
  force: ${KAFKA_INIT_FORCE_SUCCESS:true}
  topics:
    - spot-container-log
    - spot-job-log
    - spot-metrics
    - spot-events
    - spot-analytics
    - spot-trace
    - spot-alert-record
    - spot-notify-record
    - spot-entity
    - msp-tracing-metrics
    - msp-jaeger-trace
    - erda-spans
    - erda-trace-metrics

elasticsearch:
  urls: "${ES_URL:http://localhost:9200}"
  security: ${ES_SECURITY_ENABLE:false}
  username: "${ES_SECURITY_USERNAME}"
  password: "${ES_SECURITY_PASSWORD}"

# elasticsearch for log

log-storage-elasticsearch:
  _enable: ${WRITE_LOG_TO_ES_ENABLE:false}
  write_timeout: "1m"
  index_type: "logs"

log-persist:
  _enable: ${WRITE_LOG_TO_ES_ENABLE:false}
  input:
    topics: "${LOG_TOPICS:spot-container-log,spot-job-log}"
    group: "${LOG_GROUP_ID:erda-logs-dev}"
  id_keys: "${LOG_ID_KEYS:TERMINUS_DEFINE_TAG,terminus_define_tag,MESOS_TASK_ID,mesos_task_id}"
  read_timeout: "5s"
  buffer_size: ${LOG_BATCH_SIZE:200}
  parallelism: ${LOG_PERSIST_PARALLELISM:3}
  print_invalid_log: false

i18n@metric:

http-server@admin:
  addr: ":7098"
pprof:
prometheus:
